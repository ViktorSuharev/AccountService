/*
 * This file is generated by jOOQ.
 */
package com.visu.account.model.generated.tables.daos;


import java.math.BigDecimal;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import com.visu.account.model.generated.tables.Accounts;
import com.visu.account.model.generated.tables.records.AccountsRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountsDao extends DAOImpl<AccountsRecord, com.visu.account.model.generated.tables.pojos.Accounts, Long> {

    /**
     * Create a new AccountsDao without any configuration
     */
    public AccountsDao() {
        super(Accounts.ACCOUNTS, com.visu.account.model.generated.tables.pojos.Accounts.class);
    }

    /**
     * Create a new AccountsDao with an attached configuration
     */
    public AccountsDao(Configuration configuration) {
        super(Accounts.ACCOUNTS, com.visu.account.model.generated.tables.pojos.Accounts.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(com.visu.account.model.generated.tables.pojos.Accounts object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.visu.account.model.generated.tables.pojos.Accounts> fetchById(Long... values) {
        return fetch(Accounts.ACCOUNTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.visu.account.model.generated.tables.pojos.Accounts fetchOneById(Long value) {
        return fetchOne(Accounts.ACCOUNTS.ID, value);
    }

    /**
     * Fetch records that have <code>balance IN (values)</code>
     */
    public List<com.visu.account.model.generated.tables.pojos.Accounts> fetchByBalance(BigDecimal... values) {
        return fetch(Accounts.ACCOUNTS.BALANCE, values);
    }
}
